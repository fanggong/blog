<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据可视化 on Connecting the dots</title>
    <link>https://fanggong.pub/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
    <description>Recent content in 数据可视化 on Connecting the dots</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch</language>
    <lastBuildDate>Thu, 17 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fanggong.pub/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>htmlwidgets包的使用</title>
      <link>https://fanggong.pub/posts/20210617_create_your_own_widgets/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fanggong.pub/posts/20210617_create_your_own_widgets/</guid>
      <description>项目结构搭建 相关依赖的配置 R与JS的绑定 对htmlwidgets的size进行调整 完善package的其它信息 写在最后 htmlwidgets包为R提供了一个封装JS代码的框架。通过JS生成的htmlwidgets可以直接使用在Rmarkdown和Shiny中。
本文记录了一个简单的htmlwidgets的开发流程，封装了一个JS库flipdown.js，可以在Rmarkdown或Shiny中创建一个倒计时时钟。
封装的JS代码和R函数以一个包的形式存在，该包已经上传到CRAN，可以通过以下代码安装：
install.packages(&amp;quot;flipdownWidgets&amp;quot;) 或是通过Github安装：
# install.packages(&amp;quot;devtools&amp;quot;) devtools::install_github(&amp;quot;fanggong/flipdownWidgets&amp;quot;) 项目结构搭建 首先创建一个R package项目
devtools::create(&amp;quot;flipdownWidgets&amp;quot;) 初始化开发环境并安装必要的包
renv::init() renv::install(&amp;quot;htmlwidgets&amp;quot;) renv::install(&amp;quot;devtools&amp;quot;) 创建widget的脚手架
htmlwidgets::scaffoldWidget(&amp;quot;flipdownWidgets&amp;quot;) 生成函数说明文件
devtools::document() 安装包
devtools::install() 测试
flipdownWidgets::flipdownWidgets(&amp;quot;Hello World!&amp;quot;) 上面的基础结构实现了一个简单的htmlwidgets：向R函数flipdownWidgets()传递参数Hello World!，该参数会被传给对应的JS函数，JS函数的功能是将参数输出到网页上。
相关依赖的配置 接下来要进行对相关JS库的依赖配置。
找到对应JS库的.js和.css文件，复制到项目中的/inst/htmlwidgets路径下。在这里，我们需要复制的文件为flipdown.js和flipdown.css。之后修改配置文件/inst/htmlwidgets/flipdownWidgets.yaml指定依赖。
dependencies: - name: flipdown version: 0.3.2 src: &amp;quot;htmlwidgets/lib/flipdown&amp;quot; script: flipdown.js stylesheet: flipdown.css R与JS的绑定 一个最简单的htmlwidgets应该至少包含了以下四个函数：
R捆绑函数：该函数是一个R函数，它接收数据和其它关于htmlwidgets的可选项，生成一个htmlwidgets对象。在这里，该函数的基本结构通过前面的scaffoldWidget(&#34;flipdownWidgets&#34;)自动生成在/R/flipdownWidgets.R文件中； JS捆绑函数：该函数是一个JS工厂函数，它接收将要容纳这个htmlwidgets的HTML元素以及HTML元素的宽度和高度，然后通过其中的renderValue()方法创建htmlwidgets。renderValue()除了JS捆绑函数的参数外，还会接收R捆绑函数中的参数（即数据和关于htmlwidgets的可选项）。JS捆绑函数的基本结构同样会通过scaffoldWidget(&#34;flipdownWidgets&#34;)自动生成在/inst/htmlwidgets/flipdownWidgets.js文件中； flipdownWidgetsOutput函数：该函数供Shiny使用，自动生成，一般不需要做修改； renderFlipdownWidgets函数：该函数同样供Shiny使用，自动生成，一般不做修改。 这里我们需要做的其实就是以下两点：
确定R捆绑函数对应的输入参数，将这些参数在R捆绑函数中经过合适的转换之后打包为一个列表传入R捆绑函数内的htmlwidgets::createWidget()函数；
编写JS捆绑函数中的renderValue()方法，使用R捆绑函数的参数在HTML元素中生成一个htmlwidgets。 对htmlwidgets的size进行调整 在JS捆绑函数中除了renderValue()方法外，还提供了一个resize()方法。通过resize()方法即可实现根据显示位置的大小调整htmlwidgets的size。
在这里，因为flipdown.js库通过CSS文件写死了size，所以无法直接通过resize()方法来调整htmlwidgets的size。
我使用的解决方案是在flipdown.css中增加一个变量--base-unit，与size有关的CSS样式都修改为通过该变量来计算。然后在resize()方法中根据显示位置的大小修改--base-unit的值即可。
不知道有没有更好的办法，毕竟前端知识也很匮乏。
完善package的其它信息 如果只是自己使用的话，到上一步就已经完成了，只需要重新devtools::install()就可以使用该htmlwidgets了。
如果想把该包分享给他人使用或者上传到CRAN，那么遵循R包的开发原则，我们需要完善相关函数的说明文件，DESCRIPTION文件以及选择合适的LICENSE。这个不是本文主要的内容，可以参考Releasing a package。
library(flipdownWidgets) flipdownWidgets(Sys.time() + 60*60*24*100, width = &amp;quot;100%&amp;quot;) 写在最后 在上面的过程中踩了一个小坑，记录一下：</description>
    </item>
    
    <item>
      <title>ggplot2：Labels</title>
      <link>https://fanggong.pub/posts/20210330_ggplot2_labels/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fanggong.pub/posts/20210330_ggplot2_labels/</guid>
      <description> labs()：添加各种主副标题 annotate()：添加注释 labs()：添加各种主副标题 ggplot(tibble(long = rnorm(100), lat = rnorm(100))) + geom_point(aes(x = long, y = lat)) + labs( x = &amp;quot;This is x-axis label&amp;quot;, y = &amp;quot;This is y-axis label&amp;quot;, title = &amp;quot;This is the title&amp;quot;, subtitle = &amp;quot;This is the subtitle&amp;quot;, caption = &amp;quot;This is the caption&amp;quot;, tag = &amp;quot;This is tag&amp;quot; ) annotate()：添加注释 ggplot(tibble(long = rnorm(100), lat = rnorm(100))) + geom_point(aes(x = long, y = lat)) + annotate(geom = &amp;quot;text&amp;quot;, x = 0, y = 0, label = &amp;quot;This is the annotation&amp;quot;, color = &amp;quot;blue&amp;quot;) </description>
    </item>
    
    <item>
      <title>ggplot2：Stat和Geom</title>
      <link>https://fanggong.pub/posts/20210323_ggplot2_stat_geom/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fanggong.pub/posts/20210323_ggplot2_stat_geom/</guid>
      <description>对连续变量x的各区间的样本数量进行统计作图 对离散变量x的各类别数量进行统计作图 计算连续变量x的密度曲线并作图 对区域中点的数量进行统计作图 对x，y作分位数回归并作图 计算并绘制x，y的拟合曲线 在离散变量x的各类别上对连续变量y进行统计作图 计算连续变量y的密度曲线并作图 对每个点上点的数量进行统计作图 计算并绘制等高线 在x上对y进行summary并作图 在x和y上对z进行summary并作图 通过x和函数fun()计算y=fun(x)并绘制曲线 计算并绘制x的经验累计分布函数 计算并绘制Q-Q图 二维核密度估计并作图 绘制空的坐标系 绘制带箭头曲线/直线 绘制折线 绘制多边形 绘制长方形 绘制区域 绘制直线 添加标签/文本 绘制偏离原位置的点 绘制散点图 在图的四周绘制点的一维投影 绘制区间 绘制地图 绘制点阵图 不明白作用的函数 以下是一些个人看法。
ggplot2中以geom开头的函数可以理解为作图函数，以stat开头的函数可以理解为统计变换函数。在大部分的情况下，作图函数和统计变换函数都是成对出现的，也就是说在geom函数中会有一个stat参数，而stat函数中也会有一个geom参数，从而可以通过geom或stat函数一次性达到对数据进行统计变换并作图的目的。这也是我在最初很迷这个包的原因，因为在一些很奇葩的搭配下可能会出现一些很有趣的图形，虽然图形并不一定有意义，但是思考这个图形背后形成的过程是一件很有意思的事情。
对连续变量x的各区间的样本数量进行统计作图 aes()必须参数：x，y(count, density, ncount, ndensity) binwidth：每一个柱的宽度 bins：柱的数量 center、boundary：若center设为“t”，则有一根柱以“t”为中线；若boundary设为“t”，则有一根柱以“t”为边线 breaks：直接设定每一根柱的边线位置，该参数会覆盖以上所有参数 closed：若为“right”，处于交界处的值属于右边的柱子；若为“left”，处于交界处的值属于左边的柱子 pad：是否在图的左右两侧加空白，若为TRUE，最后呈现的图从高度为0的柱开始到高度为0的柱结束 x应该是连续的，离散的x使用stat_count() stat_bin() ggplot(mpg, aes(hwy)) + stat_bin(aes(y = ..density..), binwidth = 1, boundary = 0, pad = TRUE) geom_freqpoly() ggplot(mpg, aes(hwy)) + geom_freqpoly(binwidth = 1) geom_histogram() ggplot(mpg, aes(hwy)) + geom_histogram(binwidth = 1, boundary = 0.</description>
    </item>
    
  </channel>
</rss>
